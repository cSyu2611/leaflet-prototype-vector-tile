{"remainingRequest":"/Users/syu/Private/datacradle/map-prototype-vector-tile/map-prototype-vector-tile-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/syu/Private/datacradle/map-prototype-vector-tile/map-prototype-vector-tile-frontend/src/components/Map.vue?vue&type=style&index=0&id=3074bd5c&scoped=true&lang=css&","dependencies":[{"path":"/Users/syu/Private/datacradle/map-prototype-vector-tile/map-prototype-vector-tile-frontend/src/components/Map.vue","mtime":1579661610171},{"path":"/Users/syu/Private/datacradle/map-prototype-vector-tile/map-prototype-vector-tile-frontend/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/syu/Private/datacradle/map-prototype-vector-tile/map-prototype-vector-tile-frontend/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/syu/Private/datacradle/map-prototype-vector-tile/map-prototype-vector-tile-frontend/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/syu/Private/datacradle/map-prototype-vector-tile/map-prototype-vector-tile-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/syu/Private/datacradle/map-prototype-vector-tile/map-prototype-vector-tile-frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgojbWFwIHsKICBoZWlnaHQ6IDUwMHB4OwogIHdpZHRoOiA4MDBweDsKICBtYXJnaW46IGF1dG87Cn0KCg=="},{"version":3,"sources":["Map.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+OA;AACA;AACA;AACA;AACA","file":"Map.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <section class=\"container\">\n        <div id=\"map\"></div>\n        <!-- <button @click=\"changeShapeType('shape1')\">shape1</button>\n        <button @click=\"changeShapeType('shape2')\">shape2</button>\n        <button @click=\"changeShapeType('shape3')\">shape3</button> -->\n    </section>\n\n</template>\n\n<script>\n    // import env from '../../config/dev.env.var'\n    import L from 'leaflet'\n    import \"leaflet/dist/leaflet.css\"\n    // import pic from \"./100.png\"\n    // import pic2 from \"./101.png\"\n\n    export default {\n        name: 'Map',\n        components:{},\n        data () {\n            return {\n            }\n        },\n        mounted () {\n            this.drawMap()\n            .then(this.renderShape())\n            // Promise.all([this.getTile()])\n            // .then(() => {\n            //     this.renderShape();\n            // });\n            // Promise.all([this.getMarkers()])\n            // .then(() => {\n            //     this.renderMarkers();\n            // });\n            // Promise.all([this.getMarkers2()])\n            // .then(() => {\n            //     this.renderMarkers2();\n            // });\n\n        },\n        computed: {\n            sharedState () {\n                return this.$store.state\n            },\n            // shape_type () {\n            //     return this.sharedState.shape_type\n            // }\n        },\n        methods: {\n            drawMap () {\n                // タイルの設定\n                const osmtile = L.tileLayer('//{s}.tile.osm.org/{z}/{x}/{y}.png', {\n                    zIndex: 1,\n                    attribution: '&copy; <a href=\"//osm.org/copyright\">OpenStreetMap</a> contributors'\n                })\n                const gsistdtile = L.tileLayer('https://cyberjapandata.gsi.go.jp/xyz/std/{z}/{x}/{y}.png', {\n                    zIndex: 1,\n                    attribution: \"<a href='https://maps.gsi.go.jp/development/ichiran.html' target='_blank'>地理院タイル</a>\"\n                })\n                // マップの初期化\n                const map = L.map('map', { \n                    center: [34.54, 133.745],\n                    zoom: 11,\n                    layers: [osmtile],\n                    zoomControl: false,\n                    minZoom: 6,\n                    maxZoom: 17,\n                    gestureHandling: true,\n                    preferCanvas: true,\n                    scrollWheelZoom: false\n                })\n                L.control.zoom({ position: 'bottomright' }).addTo(map)\n                const mapObj = document.getElementById('map')\n                // フォーカスしたらズームできるようになる\n                mapObj.addEventListener(\"focus\", () => {map.scrollWheelZoom.enable()});\n                // フォーカスはずれたらズームできなくする\n                mapObj.addEventListener(\"blur\", () => {map.scrollWheelZoom.disable()});\n\n                // デバッグ用に縮尺表示\n                L.control.scale({imperial:false}).addTo(map)\n\n                L.control.layers({\n                  \"OpenStreetMap\": osmtile,\n                  \"国土地理院 - 標準地図\": gsistdtile,\n                }).addTo(map)\n                this.$store.commit('setMap', map)\n            },\n\n            // async getShape () {\n            //     await this.$store.dispatch('getShape')\n            // },\n            // async getCsv () {\n            //     await this.$store.dispatch('getCsv')\n            // },\n            async removeLayer (shape_type) {\n                await this.$store.commit('removeLayer', this.sharedState.layers[shape_type])\n            },\n            // setColor (features) {\n            //     // csvのデータからshapeの色分け\n            //     const KEY_CODE = features.properties.KEY_CODE\n            //     let popLevel = 0;\n            //     const info = this.sharedState.csv[this.sharedState.shape_type][KEY_CODE]\n            //     if (info) {\n            //         for (const level in env.THRESHOLD) {\n            //             if (info.value >= env.THRESHOLD[level].value) popLevel = level\n            //         }\n            //     }\n            //     return env.THRESHOLD[popLevel].color\n            // },\n            // setShapePopup (features, layer) {\n            //     const KEY_CODE = features.properties.KEY_CODE\n            //     const info = this.sharedState.csv[this.sharedState.shape_type][KEY_CODE]\n            //     if (info) {\n            //         layer.bindPopup(`\n            //             <div>想定浸水深：${info.meter}</div><br/>\n            //             <div>土砂災害危険性：${info.danger}</div><br/>\n            //         `)\n            //     } else {\n            //         layer.bindPopup(`データがありません`)\n            //     }\n            // },\n            // async getMarkers () {\n            //     await this.$store.dispatch('getMarkers')\n            // },\n            // async getMarkers2 () {\n            //     await this.$store.dispatch('getMarkers2')\n            // },\n            // async getTile () {\n            //     await this.$store.dispatch('getTile')\n            // },\n            renderShape () {\n                const geo = L.vectorGrid.protobuf(\"localhost:2611/data/kurashiki/{z}/{x}/{y}.pbf\", {\n                    // style:(features) => {\n                    //     return {\n                    //         fillColor: this.setColor(features),\n                    //         color: '#00a795',\n                    //         weight: 0.5,\n                    //     }\n                    // },\n                    // getColor:(d) => {\n                    //     return d < 1 ? '#173e34' : '#e1cb7f';\n                    // },\n                    // onEachFeature: (features, layer) => {\n                    //     const KEY_CODE = features.properties.KEY_CODE\n                    //     const info = this.sharedState.csv[this.sharedState.shape_type][KEY_CODE] \n                    //     this.setShapePopup(features, layer)\n                    //     layer.on({\n                    //             mouseover: function()\n                    //             {\n                    //                 if(layer.isPopupOpen() != true){\n                    //                     layer.setStyle(\n                    //                     {\n                    //                         color: 'black',\n                    //                         weight: 2\n                    //                     }\n                    //                     )\n                    //                 }\n                    //             },\n                    //             mouseout: function()\n                    //             {\n                    //                 if(layer.isPopupOpen() != true){\n                    //                     layer.setStyle(\n                    //                     {\n                    //                         fillColor: 'rgba(0, 102, 255, 0.5)',\n                    //                         color: '#00a795',\n                    //                         weight: 0.5\n                    //                     }\n                    //                     )\n                    //                 }\n                    //             },\n                    //             popupopen: function()\n                    //             {\n                    //                 layer.setStyle(\n                    //                 {\n                    //                     color: 'red',\n                    //                     weight: 2\n                    //                 }\n                    //                 )\n                    //                 // console.log(layer.isPopupOpen()) //eslint-disable-line\n                    //             },\n                    //             popupclose: function()\n                    //             {\n                    //                 layer.setStyle(\n                    //                 {\n                    //                     fillColor: 'rgba(0, 102, 255, 0.5)',\n                    //                     color: '#00a795',\n                    //                     weight: 0.5\n                    //                 }\n                    //                 )\n                    //             }\n                    //         })\n                    // }, \n                    renderer: L.svg()\n                })\n                this.$store.commit('addLayer', geo)  \n\n            },\n            // changeShapeType (shape_type) {\n            //     this.$store.commit('setShapeType', shape_type)\n            // },\n            // changeShape (newval, oldval) {\n            //     if (this.sharedState.layers[newval] == null) {\n            //         Promise.all([this.getShape(), this.getCsv()])\n            //         .then(() => {\n            //             this.removeLayer(oldval)\n            //             this.renderShape()\n            //         })\n            //     } else {\n            //         this.removeLayer(oldval)\n            //         this.renderShape()\n            //     }\n            // },\n            // renderMarkers(){\n            //     for(var i = 0; i < this.sharedState.markers.length; i++){\n            //         var popup1 = L.popup().setContent(\"<h1>\"+this.sharedState.markers[i].longitude+\"°N, \"+this.sharedState.markers[i].latitude+\"°E</h1><p>\"+this.sharedState.markers[i].explanation+\"</p>\"+\"<p><a href = '\"+this.sharedState.markers[i].link+\"' target='_blank'>ホームページを見る</a>\");\n            //         var markerIcon = L.icon({ iconUrl: pic, iconRetinaUrl: pic, iconSize: [50, 50], iconAnchor: [25, 25], popupAnchor: [0, -50] });\n            //         const mark = L.marker([this.sharedState.markers[i].longitude,this.sharedState.markers[i].latitude], { icon:markerIcon }, { draggable: false }).bindPopup(popup1).bindTooltip(this.sharedState.markers[i].explanation);\n            //         this.$store.commit('addMarker', mark)\n \n            //     }\n            // },\n            // renderMarkers2(){\n            //     for(var i = 0; i < this.sharedState.markers2.length; i++){\n            //         var popup1 = L.popup().setContent(\"<h1>\"+this.sharedState.markers2[i].longitude+\"°N, \"+this.sharedState.markers2[i].latitude+\"°E</h1><p>\"+this.sharedState.markers2[i].explanation+\"</p>\"+\"<p><a href = '\"+this.sharedState.markers2[i].link+\"' target='_blank'>ホームページを見る</a>\");\n            //         var markerIcon = L.icon({ iconUrl: pic2, iconRetinaUrl: pic2, iconSize: [50, 50], iconAnchor: [25, 25], popupAnchor: [0, -50] });\n            //         const mark = L.marker([this.sharedState.markers2[i].longitude,this.sharedState.markers2[i].latitude], { icon:markerIcon }, { draggable: false }).bindPopup(popup1).bindTooltip(this.sharedState.markers2[i].explanation);\n            //         this.$store.commit('addMarker', mark)\n \n            //     }\n            // }\n        },\n        watch: {\n        }\n    }\n</script>\n\n<style scoped>\n\n#map {\n  height: 500px;\n  width: 800px;\n  margin: auto;\n}\n\n</style>\n"]}]}